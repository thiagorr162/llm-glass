from pathlib import Path
import pandas as pd

def main():
    # 1) Define diretórios relativos
    project_dir = Path(__file__).resolve().parents[2]  # llm-glass-testes
    data_dir = project_dir / 'data' / 'filtered'

    # 2) Define caminhos dos CSVs
    csv1_path = data_dir / 'US11485676B2-US20240025797A1.csv'
    csv2_path = data_dir / 'compounds_and_refractive_post_processed.csv'

    # 3) Carrega os dados
    # CSV1 usa ponto‐e‐vírgula como delimitador e pode ter espaços nos cabeçalhos
    df1 = pd.read_csv(csv1_path, sep=';')
    # Remove espaços no começo/fim de cada nome de coluna
    df1.columns = df1.columns.str.strip()
    df2 = pd.read_csv(csv2_path)

    # 4) Colunas a comparar
    comp_cols = [
        'Al2O3', 'BaO', 'Bi2O3', 'CaO', 'CeO2', 'Fe2O3', 'K2O',
        'La2O3', 'Li2O', 'MgO', 'Na2O', 'Nb2O5', 'P2O5', 'SiO2',
        'SrO', 'Ta2O5', 'TiO2', 'WO3', 'Y2O3', 'ZnO', 'ZrO2'
    ]

    # 5) Verifica se todas as colunas estão presentes
    missing1 = [c for c in comp_cols if c not in df1.columns]
    missing2 = [c for c in comp_cols if c not in df2.columns]
    if missing1 or missing2:
        raise ValueError(
            f"Colunas faltando em CSV1: {missing1}\n"
            f"Colunas faltando em CSV2: {missing2}"
        )

    # 6) Prepara chave única das linhas de df1 (sem duplicatas)
    df1_keys = df1[comp_cols].drop_duplicates()

    # 7) Merge para identificar quais linhas de df2 aparecem em df1_keys
    df_merged = df2.merge(
        df1_keys,
        on=comp_cols,
        how='left',
        indicator=True,
        sort=False
    )

    # 8) Separa iguais e não-iguais (com base no indicador "_merge")
    df_equal     = df_merged[df_merged['_merge'] == 'both']     .drop(columns=['_merge'])
    df_not_equal = df_merged[df_merged['_merge'] == 'left_only'].drop(columns=['_merge'])

    # 9) Grava os resultados em CSV
    equal_path     = data_dir / 'equal_lines.csv'
    not_equal_path = data_dir / 'not_equal_lines.csv'
    df_equal    .to_csv(equal_path,     index=False)
    df_not_equal.to_csv(not_equal_path, index=False)

    # 10) Prints de contagem
    print(f"Total rows in CSV2:       {len(df2)}")
    print(f"Equal lines:       {len(df_equal)}")
    print(f"Different lines:   {len(df_not_equal)}")

        # 11) Contagem por categoria em Origin
    categories = ['common', 'u1', 'u2', 'dyn1', 'dyn2']

    print("== Origin counts in equal_lines.csv ==")
    eq_counts = df_equal['Origin'].value_counts()
    for cat in categories:
        print(f"{cat:6s}: {eq_counts.get(cat, 0)}")
    print()

    print("== Origin counts in not_equal_lines.csv ==")
    neq_counts = df_not_equal['Origin'].value_counts()
    for cat in categories:
        print(f"{cat:6s}: {neq_counts.get(cat, 0)}")

if __name__ == "__main__":
    main()
